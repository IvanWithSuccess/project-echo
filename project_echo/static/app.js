let currentAccount = null; // Holds the account object being edited\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n    // Set up initial state\n    switchSection(\'dashboard\');\n    setupTabListeners();\n});\n\nfunction setupTabListeners() {\n    const accountTabs = document.querySelector(\'#account-settings md-tabs\');\n    accountTabs.addEventListener(\'change\', (event) => {\n        const activeTabId = accountTabs.activeTab.id;\n        document.querySelectorAll(\'#account-settings .tab-panel\').forEach(p => p.classList.remove(\'active\'));\n        \n        if (activeTabId === \'tab-main-settings\') {\n            document.getElementById(\'main-settings-panel\').classList.add(\'active\');\n        } else if (activeTabId === \'tab-proxy-settings\') {\n            document.getElementById(\'proxy-settings-panel\').classList.add(\'active\');\n        }\n    });\n}\n\n// --- Page & Section Navigation ---\n\nfunction switchSection(sectionId) {\n    document.querySelectorAll(\'.content-section\').forEach(s => s.style.display = \'none\');\n    document.querySelectorAll(\'.nav-item\').forEach(i => i.classList.remove(\'active\'));\n\n    const section = document.getElementById(sectionId);\n    if(section) section.style.display = \'block\';\n\n    const navItem = document.getElementById(`nav-${sectionId}`) || document.getElementById(`nav-${sectionId.split(\'-\')[0]}`);\n    if(navItem) navItem.classList.add(\'active\');\n\n    // Load data for the activated section\n    if (sectionId === \'accounts\') loadAccounts();\n    if (sectionId === \'proxies\') loadProxies();\n    // Stubs for not-yet-implemented sections\n    if (sectionId === \'audiences\') {}\n    if (sectionId === \'campaigns\') {}\n}\n\nfunction showAccountSettingsPage(account) {\n    currentAccount = account; \n    switchSection(\'account-settings\'); \n    document.getElementById(\'settings-account-display-phone\').innerText = account.phone;\n    \n    const settings = account.settings || {};\n    const profile = settings.profile || {};\n\n    // Populate Main Settings\n    document.getElementById(\'account-first-name\').value = profile.first_name || \'\';\n    document.getElementById(\'account-last-name\').value = profile.last_name || \'\';\n    document.getElementById(\'account-bio\').value = profile.bio || \'\';\n    document.getElementById(\'account-user-agent-input\').value = settings.user_agent || \'\';\n\n    const avatarPreview = document.getElementById(\'avatar-preview\');\n    const avatarPathInput = document.getElementById(\'account-avatar-path\');\n    avatarPathInput.value = profile.avatar_path || \'\';\n    if (profile.avatar_path && profile.avatar_path !== \'None\') {\n        // Assuming uploads are served from a known directory\n        avatarPreview.src = `/uploads/${profile.avatar_path.split(\'/\').pop()}`;\n        avatarPreview.style.display = \'block\';\n    } else {\n        avatarPreview.style.display = \'none\';\n    }\n\n    // Set the active tab to Main Settings\n    const accountTabs = document.querySelector(\'#account-settings md-tabs\');\n    accountTabs.activeTabIndex = 0;\n    document.querySelectorAll(\'#account-settings .tab-panel\').forEach(p => p.classList.remove(\'active\'));\n    document.getElementById(\'main-settings-panel\').classList.add(\'active\');\n\n    // Populate Proxy Dropdown\n    populateProxyDropdown(settings.proxy ? settings.proxy.id : null);\n}\n\nfunction showMainAccountsPage() {\n    currentAccount = null;\n    switchSection(\'accounts\');\n}\n\n// --- Generic API Helper ---\nfunction apiPost(endpoint, body, callback) {\n    fetch(endpoint, {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify(body)\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        if(data.message) alert(data.message);\n        if (callback) callback(data);\n    })\n    .catch(error => {\n        console.error(`API Error at ${endpoint}:`, error);\n        alert(`An error occurred. See console for details.`);\n    });\n}\n\n// --- Accounts Center ---\n\nfunction loadAccounts() {\n    fetch(\'/api/accounts\').then(r => r.json()).then(accounts => {\n        const tableBody = document.getElementById(\'accounts-table-body\');\n        tableBody.innerHTML = \'\';\n        accounts.forEach(acc => {\n            const tagsHtml = (acc.settings?.tags || []).map(t => `<div class=\"tag-chip\">${t}</div>`).join(\'\');\n            const row = document.createElement(\'tr\');\n            // Use JSON.stringify to safely pass the account object\n            row.innerHTML = `\n                <td>${acc.phone}</td>\n                <td>${acc.username || \'N/A\'}</td>\n                <td><div class=\"tag-chip-container\">${tagsHtml}</div></td>\n                <td>\n                    <md-text-button onclick=\'showAccountSettingsPage(${JSON.stringify(acc).replace(/\"/g, \"&\quot;\")})\'>Settings</md-text-button>\n                    <md-text-button onclick=\"deleteAccount(\'${acc.phone}\')\">Delete</md-text-button>\n                </td>\n            `;\n            tableBody.appendChild(row);\n        });\n    });\n}\n\nfunction addAccount() {\n    const phone = prompt(\'Enter phone number (e.g., +1234567890):\');\n    if (!phone) return;\n\n    apiPost(\'/api/accounts/add\', { phone }, data => {\n        if (data.message.includes(\'code sent\')) {\n            const code = prompt(\'Enter verification code:\');\n            if (code) {\n                apiPost(\'/api/accounts/finalize\', { phone, code }, finalizeData => {\n                     if (finalizeData.message.includes(\'password required\')) {\n                        const password = prompt(\'Enter 2FA password:\');\n                        if(password) apiPost(\'/api/accounts/finalize\', { phone, password }, () => loadAccounts());\n                    } else {\n                        loadAccounts();\n                    }\n                });\n            }\n        } else if (data.message.includes(\'password required\')) {\n             const password = prompt(\'Enter 2FA password:\');\n             if(password) apiPost(\'/api/accounts/finalize\', { phone, password }, () => loadAccounts());\n        } else {\n             loadAccounts();\n        }\n    });\n}\n\nfunction deleteAccount(phone) {\n    if (confirm(`Delete account ${phone}? This also deletes the session file.`)) {\n        apiPost(\'/api/accounts/delete\', { phone }, () => loadAccounts());\n    }\n}\n\n// --- Account Settings ---\n\nfunction handleAvatarUpload() {\n    const input = document.getElementById(\'avatar-upload-input\');\n    const file = input.files[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append(\'avatar\', file);\n\n    fetch(\'/api/accounts/upload_avatar\', { method: \'POST\', body: formData })\n    .then(r => r.json())\n    .then(data => {\n        if (data.status === \'ok\') {\n            document.getElementById(\'account-avatar-path\').value = data.path;\n            const avatarPreview = document.getElementById(\'avatar-preview\');\n            avatarPreview.src = URL.createObjectURL(file);\n            avatarPreview.style.display = \'block\';\n            alert(\'Avatar uploaded. Save settings to confirm.\');\n        } else {\n            alert(`Upload failed: ${data.message}`);\n        }\n    });\n}\n\nfunction generateUserAgent() {\n    const os = document.getElementById(\'ua-os\').value;\n    const chromeVersion = document.getElementById(\'ua-chrome-version\').value;\n    document.getElementById(\'account-user-agent-input\').value = \n        `Mozilla/5.0 (${os}; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n}\n\nasync function saveAccountSettings() {\n    if (!currentAccount) return alert(\'No account selected.\');\n\n    const phone = currentAccount.phone;\n    const proxySelect = document.getElementById(\'account-proxy-select\');\n    const selectedProxyId = proxySelect.value;\n    \n    // Fetch the full proxy object\n    const proxiesResponse = await fetch(\'/api/proxies\');\n    const proxies = await proxiesResponse.json();\n    const selectedProxy = proxies.find(p => p.id === selectedProxyId) || null;\n\n    const settings = {\n        ...currentAccount.settings, // Preserve existing settings like tags\n        profile: {\n            first_name: document.getElementById(\'account-first-name\').value,\n            last_name: document.getElementById(\'account-last-name\').value,\n            bio: document.getElementById(\'account-bio\').value,\n            avatar_path: document.getElementById(\'account-avatar-path\').value,\n        },\n        user_agent: document.getElementById(\'account-user-agent-input\').value,\n        proxy: selectedProxy,\n    };\n\n    apiPost(\'/api/accounts/settings\', { phone, settings }, (data) => {\n        if (data.status === \'ok\') {\n            currentAccount.settings = settings; // Update local object\n        }\n    });\n}\n\nfunction applyProfileChanges() {\n     if (!currentAccount) return alert(\'No account selected.\');\n     apiPost(\'/api/accounts/profile\', {\n         phone: currentAccount.phone,\n         profile: {\n            first_name: document.getElementById(\'account-first-name\').value,\n            last_name: document.getElementById(\'account-last-name\').value,\n            bio: document.getElementById(\'account-bio\').value,\n            avatar_path: document.getElementById(\'account-avatar-path\').value,\n        }\n    });\n}\n\nasync function populateProxyDropdown(selectedProxyId) {\n    const select = document.getElementById(\'account-proxy-select\');\n    select.innerHTML = \'<md-select-option value=\"\"></md-select-option>\'; // \"No Proxy\" option\n    try {\n        const response = await fetch(\'/api/proxies\');\n        const proxies = await response.json();\n        proxies.forEach(p => {\n            const option = document.createElement(\'md-select-option\');\n            option.value = p.id;\n            option.innerText = `${p.host}:${p.port}`;\n            if (p.id === selectedProxyId) {\n                option.selected = true;\n            }\n            select.appendChild(option);\n        });\n    } catch (error) { console.error(\"Couldn\'t load proxies for dropdown:\", error); }\n}\n\n// --- Proxy Manager ---\n\nfunction loadProxies() {\n    fetch(\'/api/proxies\').then(r => r.json()).then(proxies => {\n        const tableBody = document.getElementById(\'proxies-table-body\');\n        tableBody.innerHTML = \'\';\n        if (!proxies) return;\n        proxies.forEach(p => {\n            const row = document.createElement(\'tr\');\n            row.id = `proxy-${p.id}`;\n            row.innerHTML = `\n                <td>${p.host}</td>\n                <td>${p.port}</td>\n                <td>${p.user || \'N/A\'}</td>\n                <td class=\"proxy-status\">Not Checked</td>\n                <td>\n                    <md-text-button onclick=\"checkProxy(\'${p.id}\')\">Check</md-text-button>\n                    <md-text-button onclick=\"deleteProxy(\'${p.id}\')\">Delete</md-text-button>\n                </td>\n            `;\n            tableBody.appendChild(row);\n        });\n    }).catch(e => console.error(\'Failed to load proxies:\', e));\n}\n\nfunction addProxy() {\n    const proxyData = {\n        type: document.getElementById(\'proxy-add-type\').value,\n        host: document.getElementById(\'proxy-add-host\').value,\n        port: parseInt(document.getElementById(\'proxy-add-port\').value, 10),\n        user: document.getElementById(\'proxy-add-user\').value,\n        pass: document.getElementById(\'proxy-add-pass\').value\n    };\n    if (!proxyData.host || !proxyData.port) return alert(\'Host and Port are required.\');\n\n    apiPost(\'/api/proxies/add\', proxyData, (data) => {\n        if (data.status === \'ok\') {\n            loadProxies();\n            // Clear form\n            document.getElementById(\'proxy-add-host\').value = \'\';\n            document.getElementById(\'proxy-add-port\').value = \'\';\n            document.getElementById(\'proxy-add-user\').value = \'\';\n            document.getElementById(\'proxy-add-pass\').value = \'\';\n        }\n    });\n}\n\nfunction deleteProxy(proxyId) {\n    if (confirm(\'Are you sure you want to delete this proxy?\')) {\n        apiPost(\'/api/proxies/delete\', { id: proxyId }, (data) => {\n            if (data.status === \'ok\') loadProxies();\n        });\n    }\n}\n\nasync function checkProxy(proxyId) {\n    const statusCell = document.querySelector(`#proxy-${proxyId} .proxy-status`);\n    if (!statusCell) return;\n    statusCell.textContent = \'Checking...\';\n    statusCell.className = \'proxy-status\'; // Reset class\n\n    try {\n        const proxiesResponse = await fetch(\'/api/proxies\');\n        const proxies = await proxiesResponse.json();\n        const proxyToCheck = proxies.find(p => p.id === proxyId);\n\n        if (!proxyToCheck) return statusCell.textContent = \'Error: Not Found\';\n\n        apiPost(\'/api/proxies/check\', proxyToCheck, (data) => {\n            statusCell.textContent = data.proxy_status || \'Error\';\n            statusCell.classList.add(data.proxy_status === \'working\' ? \'working\' : \'not-working\');\n        });\n    } catch (e) {\n        statusCell.textContent = \'Error\';\n    }\n}\n\n// --- Tags Dialog ---\nconst tagsDialog = document.getElementById(\'tags-dialog\');\n\nfunction openTagsDialog() {\n    loadTags();\n    tagsDialog.show();\n}\n\nfunction loadTags() {\n    const container = document.getElementById(\'tags-list\');\n    container.innerHTML = \'Loading...\';\n    fetch(\'/api/tags\').then(r => r.json()).then(tags => {\n        container.innerHTML = \'\';\n        if (!tags) return;\n        tags.forEach(tag => {\n            const tagEl = document.createElement(\'div\');\n            tagEl.className = \'tag-item\';\n            tagEl.innerHTML = `\n                <span>${tag}</span>\n                <md-icon-button onclick=\"deleteTag(\'${tag}\')\">\n                    <span class=\"material-symbols-outlined\">delete</span>\n                </md-icon-button>\n            `;\n            container.appendChild(tagEl);\n        });\n    }).catch(e => {\n        container.innerHTML = \'Failed to load tags.\';\n        console.error(\'Failed to load tags:\', e);\n    });\n}\n\nfunction addTag() {\n    const nameInput = document.getElementById(\'tag-add-name\');\n    const name = nameInput.value.trim();\n    if (!name) return;\n    apiPost(\'/api/tags/add\', { name }, (data) => {\n        if (data.status === \'ok\') {\n            loadTags(); // Refresh the list in the dialog\n            nameInput.value = \'\';\n        }\n    });\n}\n\nfunction deleteTag(tagName) {\n    if (confirm(`Delete the tag \"${tagName}\"? This will remove it from all accounts.`)) {\n        apiPost(\'/api/tags/delete\', { name: tagName }, (data) => {\n            if (data.status === \'ok\') {\n                loadTags(); // Refresh the dialog list\n                loadAccounts(); // Refresh the accounts table to show tag removal\n            }\n        });\n    }\n}\n